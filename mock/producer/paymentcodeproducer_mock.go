// Code generated by MockGen. DO NOT EDIT.
// Source: producer/paymentcodeproducer.go

// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	model "pevin-golang-training-beginner/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPaymentCodeMessageProducer is a mock of IPaymentCodeMessageProducer interface.
type MockIPaymentCodeMessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentCodeMessageProducerMockRecorder
}

// MockIPaymentCodeMessageProducerMockRecorder is the mock recorder for MockIPaymentCodeMessageProducer.
type MockIPaymentCodeMessageProducerMockRecorder struct {
	mock *MockIPaymentCodeMessageProducer
}

// NewMockIPaymentCodeMessageProducer creates a new mock instance.
func NewMockIPaymentCodeMessageProducer(ctrl *gomock.Controller) *MockIPaymentCodeMessageProducer {
	mock := &MockIPaymentCodeMessageProducer{ctrl: ctrl}
	mock.recorder = &MockIPaymentCodeMessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentCodeMessageProducer) EXPECT() *MockIPaymentCodeMessageProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockIPaymentCodeMessageProducer) Produce(p *model.PaymentCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockIPaymentCodeMessageProducerMockRecorder) Produce(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockIPaymentCodeMessageProducer)(nil).Produce), p)
}
