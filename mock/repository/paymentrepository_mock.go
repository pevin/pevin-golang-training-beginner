// Code generated by MockGen. DO NOT EDIT.
// Source: repository/paymentrepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pevin/pevin-golang-training-beginner/model"
)

// MockIPaymentRepository is a mock of IPaymentRepository interface.
type MockIPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepositoryMockRecorder
}

// MockIPaymentRepositoryMockRecorder is the mock recorder for MockIPaymentRepository.
type MockIPaymentRepositoryMockRecorder struct {
	mock *MockIPaymentRepository
}

// NewMockIPaymentRepository creates a new mock instance.
func NewMockIPaymentRepository(ctrl *gomock.Controller) *MockIPaymentRepository {
	mock := &MockIPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepository) EXPECT() *MockIPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPaymentRepository) Create(ctx context.Context, p *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPaymentRepositoryMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPaymentRepository)(nil).Create), ctx, p)
}
