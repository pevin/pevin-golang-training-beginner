// Code generated by MockGen. DO NOT EDIT.
// Source: repository/inquiryrepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pevin/pevin-golang-training-beginner/model"
)

// MockIInquiryRepository is a mock of IInquiryRepository interface.
type MockIInquiryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIInquiryRepositoryMockRecorder
}

// MockIInquiryRepositoryMockRecorder is the mock recorder for MockIInquiryRepository.
type MockIInquiryRepositoryMockRecorder struct {
	mock *MockIInquiryRepository
}

// NewMockIInquiryRepository creates a new mock instance.
func NewMockIInquiryRepository(ctrl *gomock.Controller) *MockIInquiryRepository {
	mock := &MockIInquiryRepository{ctrl: ctrl}
	mock.recorder = &MockIInquiryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInquiryRepository) EXPECT() *MockIInquiryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIInquiryRepository) Create(ctx context.Context, p *model.Inquiry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIInquiryRepositoryMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIInquiryRepository)(nil).Create), ctx, p)
}

// GetByTransactionId mocks base method.
func (m *MockIInquiryRepository) GetByTransactionId(ctx context.Context, trxId string) (model.Inquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionId", ctx, trxId)
	ret0, _ := ret[0].(model.Inquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionId indicates an expected call of GetByTransactionId.
func (mr *MockIInquiryRepositoryMockRecorder) GetByTransactionId(ctx, trxId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionId", reflect.TypeOf((*MockIInquiryRepository)(nil).GetByTransactionId), ctx, trxId)
}
