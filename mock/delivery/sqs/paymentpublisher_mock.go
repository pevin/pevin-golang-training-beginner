// Code generated by MockGen. DO NOT EDIT.
// Source: delivery/sqs/paymentpublisher.go

// Package mock_sqs is a generated GoMock package.
package mock_sqs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pevin/pevin-golang-training-beginner/model"
)

// MockIPaymentPublisher is a mock of IPaymentPublisher interface.
type MockIPaymentPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentPublisherMockRecorder
}

// MockIPaymentPublisherMockRecorder is the mock recorder for MockIPaymentPublisher.
type MockIPaymentPublisherMockRecorder struct {
	mock *MockIPaymentPublisher
}

// NewMockIPaymentPublisher creates a new mock instance.
func NewMockIPaymentPublisher(ctrl *gomock.Controller) *MockIPaymentPublisher {
	mock := &MockIPaymentPublisher{ctrl: ctrl}
	mock.recorder = &MockIPaymentPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentPublisher) EXPECT() *MockIPaymentPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIPaymentPublisher) Publish(arg0 model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIPaymentPublisherMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIPaymentPublisher)(nil).Publish), arg0)
}
